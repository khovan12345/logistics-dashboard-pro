import { NotificationMessage, ReportData, VehicleTrip } from '@/types';
import TelegramBot from 'node-telegram-bot-api';

// Telegram types
interface TelegramMessage {
  message_id: number;
  from?: {
    id: number;
    first_name: string;
    username?: string;
  };
  date: number;
  chat: {
    id: number;
    type: string;
  };
  text?: string;
}

interface TelegramCallbackQuery {
  id: string;
  from: {
    id: number;
    first_name: string;
    username?: string;
  };
  message?: TelegramMessage;
  data?: string;
}

interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
  callback_query?: TelegramCallbackQuery;
}

export class TelegramService {
  private bot: TelegramBot | null;
  private chatId: string;
  private enabled: boolean;

  constructor() {
    const token = process.env.TELEGRAM_BOT_TOKEN || '';
    this.chatId = process.env.TELEGRAM_CHAT_ID || '';
    this.enabled = !!token && !!this.chatId;

    if (this.enabled) {
      this.bot = new TelegramBot(token, { polling: false });
    } else {
      console.warn('Telegram not configured properly');
      this.bot = null;
    }
  }

  // G·ª≠i th√¥ng b√°o ho√†n th√†nh chuy·∫øn xe
  async notifyTripCompleted(trip: VehicleTrip): Promise<boolean> {
    if (!this.enabled || !this.bot) return false;

    try {
      const duration =
        trip.endTime && trip.startTime
          ? Math.round((trip.endTime.getTime() - trip.startTime.getTime()) / (1000 * 60 * 60))
          : 0;

      const message = `üöõ *CHUY·∫æN XE HO√ÄN TH√ÄNH*

üìã *Th√¥ng tin chuy·∫øn:*
‚Ä¢ M√£ chuy·∫øn: \`${trip.id}\`
‚Ä¢ Xe: ${trip.vehicleId}
‚Ä¢ T√†i x·∫ø: ${trip.driverName}
‚Ä¢ Tuy·∫øn ƒë∆∞·ªùng: ${trip.route}

üìä *Chi ti·∫øt:*
‚Ä¢ S·∫£n ph·∫©m: ${trip.products.reduce((sum, p) => sum + p.quantity, 0)} m√≥n
‚Ä¢ Chi ph√≠: ${trip.cost.toLocaleString('vi-VN')} ‚Ç´
‚Ä¢ Qu√£ng ƒë∆∞·ªùng: ${trip.distance} km
‚Ä¢ Th·ªùi gian: ${duration}h

‚è∞ *Th·ªùi gian:*
‚Ä¢ Xu·∫•t ph√°t: ${trip.startTime.toLocaleString('vi-VN')}
‚Ä¢ Ho√†n th√†nh: ${trip.endTime?.toLocaleString('vi-VN')}

${trip.notes ? `üìù *Ghi ch√∫:* ${trip.notes}` : ''}

‚úÖ Chuy·∫øn xe ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n v√†o h·ªá th·ªëng!`;

      await this.bot.sendMessage(this.chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìä Xem Dashboard', url: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard` },
              { text: 'üìã Chi ti·∫øt', callback_data: `trip_detail_${trip.id}` },
            ],
          ],
        },
      });

      return true;
    } catch (error) {
      console.error('Error sending trip completion notification:', error);
      return false;
    }
  }

  // G·ª≠i b√°o c√°o h√†ng ng√†y
  async sendDailyReport(reportData: ReportData): Promise<boolean> {
    if (!this.enabled || !this.bot) return false;

    try {
      const { summary, trips } = reportData;
      const date = reportData.startDate.toLocaleDateString('vi-VN');

      const message = `üìà *B√ÅO C√ÅO H√ÄNG NG√ÄY*
üìÖ ${date}

üìä *T√≥m t·∫Øt:*
‚Ä¢ T·ªïng chuy·∫øn: ${summary.totalTrips}
‚Ä¢ T·ªïng s·∫£n ph·∫©m: ${summary.totalProducts.toLocaleString()}
‚Ä¢ T·ªïng chi ph√≠: ${summary.totalCost.toLocaleString('vi-VN')} ‚Ç´
‚Ä¢ Qu√£ng ƒë∆∞·ªùng: ${summary.totalDistance} km
‚Ä¢ Chi ph√≠/km: ${summary.averageCostPerKm.toLocaleString('vi-VN')} ‚Ç´

üöõ *Chi ti·∫øt chuy·∫øn xe:*
${trips
  .slice(0, 5)
  .map(
    (trip) => `‚Ä¢ ${trip.vehicleId} - ${trip.route} (${trip.status === 'completed' ? '‚úÖ' : 'üîÑ'})`,
  )
  .join('\n')}
${trips.length > 5 ? `\n... v√† ${trips.length - 5} chuy·∫øn kh√°c` : ''}

üìä Dashboard: ${process.env.NEXT_PUBLIC_APP_URL}`;

      await this.bot.sendMessage(this.chatId, message, {
        parse_mode: 'Markdown',
      });

      return true;
    } catch (error) {
      console.error('Error sending daily report:', error);
      return false;
    }
  }

  // G·ª≠i c·∫£nh b√°o
  async sendAlert(
    message: string,
    priority: 'low' | 'normal' | 'high' | 'urgent' = 'normal',
  ): Promise<boolean> {
    if (!this.enabled || !this.bot) return false;

    try {
      const icons = {
        low: 'üí°',
        normal: '‚ö†Ô∏è',
        high: 'üö®',
        urgent: 'üî¥',
      };

      const alertMessage = `${icons[priority]} *C·∫¢NH B√ÅO*

${message}

‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`;

      await this.bot.sendMessage(this.chatId, alertMessage, {
        parse_mode: 'Markdown',
      });

      return true;
    } catch (error) {
      console.error('Error sending alert:', error);
      return false;
    }
  }

  // G·ª≠i th√¥ng b√°o t√πy ch·ªânh
  async sendCustomNotification(notification: NotificationMessage): Promise<boolean> {
    if (!this.enabled || !this.bot) return false;

    try {
      const icons = {
        trip_completed: 'üöõ',
        daily_report: 'üìä',
        alert: '‚ö†Ô∏è',
        custom: 'üì¢',
      };

      const message = `${icons[notification.type]} *${notification.title.toUpperCase()}*

${notification.message}

‚è∞ ${notification.timestamp.toLocaleString('vi-VN')}`;

      await this.bot.sendMessage(this.chatId, message, {
        parse_mode: 'Markdown',
      });

      return true;
    } catch (error) {
      console.error('Error sending custom notification:', error);
      return false;
    }
  }

  // X·ª≠ l√Ω webhook t·ª´ Telegram
  async handleWebhook(update: TelegramUpdate): Promise<void> {
    try {
      if (update.message) {
        await this.handleMessage(update.message);
      }

      if (update.callback_query) {
        await this.handleCallbackQuery(update.callback_query);
      }
    } catch (error) {
      console.error('Error handling webhook:', error);
    }
  }

  // X·ª≠ l√Ω tin nh·∫Øn t·ª´ user
  private async handleMessage(message: TelegramMessage): Promise<void> {
    if (!this.bot) return;

    const chatId = message.chat.id;
    const text = message.text;

    if (!text) return;

    const commands = {
      '/start':
        'Ch√†o m·ª´ng ƒë·∫øn v·ªõi Logistics Dashboard Pro! üöõ\n\nC√°c l·ªánh c√≥ s·∫µn:\n/status - Tr·∫°ng th√°i h·ªá th·ªëng\n/today - B√°o c√°o h√¥m nay\n/help - Tr·ª£ gi√∫p',
      '/status': await this.getSystemStatus(),
      '/today': await this.getTodayReport(),
      '/help':
        'Tr·ª£ gi√∫p:\n‚Ä¢ /status - Xem tr·∫°ng th√°i h·ªá th·ªëng\n‚Ä¢ /today - B√°o c√°o h√¥m nay\n‚Ä¢ /trips - Danh s√°ch chuy·∫øn xe\n‚Ä¢ /config - C·∫•u h√¨nh h·ªá th·ªëng',
    };

    const response =
      commands[text as keyof typeof commands] ||
      'L·ªánh kh√¥ng h·ª£p l·ªá. G√µ /help ƒë·ªÉ xem danh s√°ch l·ªánh.';

    await this.bot.sendMessage(chatId, response);
  }

  // X·ª≠ l√Ω callback query
  private async handleCallbackQuery(callbackQuery: TelegramCallbackQuery): Promise<void> {
    if (!this.bot || !callbackQuery.message) return;

    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data && data.startsWith('trip_detail_')) {
      const tripId = data.replace('trip_detail_', '');
      // L·∫•y chi ti·∫øt trip v√† g·ª≠i l·∫°i
      const response = `Chi ti·∫øt chuy·∫øn ${tripId} ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t...`;
      await this.bot.sendMessage(chatId, response);
    }

    await this.bot.answerCallbackQuery(callbackQuery.id);
  }

  // L·∫•y tr·∫°ng th√°i h·ªá th·ªëng
  private async getSystemStatus(): Promise<string> {
    const status = `üìä *TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG*

üü¢ Dashboard: Ho·∫°t ƒë·ªông
üü¢ Google Sheets: K·∫øt n·ªëi
üü¢ Telegram Bot: Ho·∫°t ƒë·ªông
üü¢ Email Service: S·∫µn s√†ng

‚è∞ C·∫≠p nh·∫≠t: ${new Date().toLocaleString('vi-VN')}`;

    return status;
  }

  // L·∫•y b√°o c√°o h√¥m nay
  private async getTodayReport(): Promise<string> {
    // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu th·ª±c t·∫ø
    const report = `üìà *B√ÅO C√ÅO H√îM NAY*

üöõ Chuy·∫øn xe: ƒêang c·∫≠p nh·∫≠t...
üì¶ S·∫£n ph·∫©m: ƒêang c·∫≠p nh·∫≠t...
üí∞ Chi ph√≠: ƒêang c·∫≠p nh·∫≠t...

Truy c·∫≠p ${process.env.NEXT_PUBLIC_APP_URL} ƒë·ªÉ xem chi ti·∫øt.`;

    return report;
  }

  // C√†i ƒë·∫∑t webhook
  async setWebhook(): Promise<boolean> {
    if (!this.enabled || !this.bot) return false;

    try {
      const webhookUrl = `${process.env.NEXT_PUBLIC_APP_URL}/api/telegram/webhook`;
      await this.bot.setWebHook(webhookUrl);
      console.log('Telegram webhook set successfully');
      return true;
    } catch (error) {
      console.error('Error setting Telegram webhook:', error);
      return false;
    }
  }

  // X√≥a webhook
  async deleteWebhook(): Promise<boolean> {
    if (!this.enabled || !this.bot) return false;

    try {
      await this.bot.deleteWebHook();
      console.log('Telegram webhook deleted successfully');
      return true;
    } catch (error) {
      console.error('Error deleting Telegram webhook:', error);
      return false;
    }
  }

  // Ki·ªÉm tra bot info
  async getBotInfo(): Promise<TelegramBot.User | null> {
    if (!this.enabled || !this.bot) return null;

    try {
      return await this.bot.getMe();
    } catch (error) {
      console.error('Error getting bot info:', error);
      return null;
    }
  }
}

export const telegramService = new TelegramService();
